name: Build and Push Docker Images

on:
  push:
    branches: [ dev ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ dev ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Add this step to set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          # Add the platforms key to build for amd64 and arm64
          platforms: linux/amd64, linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create test log file
        run: |
          mkdir -p logs
          echo '{"time":"2024-01-20T10:00:00Z","ServiceName":"test-service","RequestMethod":"GET","RequestPath":"/api/test","DownstreamStatus":200,"Duration":0.05}' > logs/traefik.log

      - name: Start services
        run: |
          echo "TRAEFIK_LOG_PATH=./logs" > .env
          docker-compose up -d

      - name: Wait for services
        run: sleep 10

      - name: Test backend health
        run: |
          curl -f http://localhost:3001/health || exit 1

      - name: Test frontend
        run: |
          curl -f http://localhost:3000 || exit 1

      - name: Show logs if failed
        if: failure()
        run: docker-compose logs
